# Code generated by the Create Go App CLI. DO NOT EDIT.

# Ansible inventory for deploy the Create Go App project.
# Author: Vic Sh√≥stak <koddr.me@gmail.com> (https://github.com/koddr)
# For more information, please visit https://github.com/create-go-app/cli

[{{ .Project.Name }}]
{{ if .Deploy.Ansible.Host.IP }}{{ .Deploy.Ansible.Host.IP }}{{ else }}127.0.0.1{{ end }}

[{{ .Project.Name }}:vars]
#
# Ansible default variables to start playbook:
#

# Set remote sudo username
ansible_user={{ if .Deploy.Ansible.Host.User }}{{ .Deploy.Ansible.Host.User }}{{ else }}root{{ end }}
# Ask become password for remote sudo user
ansible_become={{ if .Deploy.Ansible.BecomeSudoUser }}yes{{ else }}no{{ end }}
# Set connection type to remote server (usually, 'ssh')
ansible_connection={{ if .Deploy.Ansible.Connection }}{{ .Deploy.Ansible.Connection }}{{ else }}ssh{{ end }}
# Set Python 3 default path
ansible_python_interpreter={{ if .Deploy.Ansible.Host.PythonInterpreterPath }}{{ .Deploy.Ansible.Host.PythonInterpreterPath }}{{ else }}/usr/bin/python3{{ end }}

#
# Remote server configuration:
#

# Set directory on your remote server for store project files
server_dir={{ if .Deploy.Ansible.Host.ProjectFolderPath }}{{ .Deploy.Ansible.Host.ProjectFolderPath }}{{ else }}/var/www/{{ .Project.Name }}{{ end }}
# Set user (owner of files/folders) name
server_user=root
# Set group name
server_group=docker

#
# Project configuration:
#

# Set your project domain
project_domain=example.com

#
# Docker configuration:
#

# Set Docker network name
docker_network=cgapp_network

#
# Backend configuration:
#

# Set backend port number,
# MUST BE MATCH to the port that is listed in your `./backend/.env` file!
backend_port=5000

#
# PostgreSQL configuration (backend DB):
#

# Set PostgreSQL container name
# MUST BE MATCH to the port that is listed in your `./backend/.env` file!
postgres_container_name=cgapp-postgres
# Set PostgreSQL version (for example, 13.2)
postgres_version=latest
# Set PostgreSQL port number,
# MUST BE MATCH to the port that is listed in your `./backend/.env` file!
postgres_port=5432
# Set PostgreSQL user name,
# MUST BE MATCH to the user name that is listed in your `./backend/.env` file!
postgres_user=postgres
# Set PostgreSQL password,
# MUST BE MATCH to the password that is listed in your `./backend/.env` file!
postgres_password=password
# Set PostgreSQL DB name,
# MUST BE MATCH to the DB name that is listed in your `./backend/.env` file!
postgres_db=postgres
# Set PostgreSQL SSL mode state ('enabled' or 'disabled'),
# MUST BE MATCH to the SSL mode state that is listed in your `./backend/.env` file!
postgres_ssl_mode=disable

#
# Go-Migrate configuration (DB migrations):
#

# Set migration number,
# if you WANT to migrate all of your migrations, just leave it blank,
# for only initial migration set it to '1'
migrate_number=1

#
# Redis configuration (backend cache):
#

# Set Redis container name
# MUST BE MATCH to the port that is listed in your `./backend/.env` file!
redis_container_name=cgapp-redis
# Set Redis version (for example, 6.2)
redis_version=latest
# Set Redis port number,
# MUST BE MATCH to the port that is listed in your `./backend/.env` file!
redis_port=6379

{{ if eq .Proxy.Name "traefik" }}#
# Traefik Proxy configuration:
#

# Set Traefik version (for example, v2.4)
traefik_version=latest
# Set log level in capital letters (DEBUG, PANIC, FATAL, ERROR, WARN, INFO)
traefik_log_level=ERROR
# Set log format between json and common
traefik_log_format=json
# Set URL for Traefik admin dashboard,
# if you DO NOT NEED dashboard (Web UI), just leave it blank
traefik_dashboard_url=cp.example.com
# Set username for Traefik admin dashboard,
# DO NOT FORGET to set this setting, if `traefik_dashboard_url` variable IS NOT empty!
traefik_dashboard_user=admin
# Set hashed password for Traefik admin dashboard,
# DO NOT FORGET to set this setting, if `traefik_dashboard_url` variable IS NOT empty!
# See: https://doc.traefik.io/traefik/middlewares/basicauth/#users
traefik_dashboard_password=admin:$$apr1$$WpxRpfMZ$$TMTfGB37C9xAHiPIDiFiB1

#
# ACME configuration (Let's Encrypt):
#

# Set your email address for SSL cert
acme_email=mail@example.com
{{ if .Wildcard }}
# You choose a DNS way to getting SSL cert,
# DO NOT FORGET to set this variable here as well as in `./roles/traefik/tasks/main.yml` file!

# Set DNS provider
# See: https://doc.traefik.io/traefik/https/acme/#providers
acme_dns_provider=digitalocean
# Set environment variable(s) for a DNS provider,
# for example, auth token for DigitalOcean
do_auth_token=XXXXXXXXXXX
{{ else }}# Change to 'no' for getting a real SSL cert
acme_staging=yes{{ end }}
{{ else if eq .Proxy.Name "nginx" }}#
# Nginx configuration:
#

# Set Nginx version (for example, 1.20-alpine)
nginx_version=alpine
# Set redirect from HTTP to HTTPS for default server
nginx_use_only_https=yes
# Set redirect from WWW to non-WWW domain for default server
nginx_redirect_to_non_www=yes{{ end }}
